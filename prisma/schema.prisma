// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator dbml {
  provider = "prisma-dbml-generator"
}

enum TransferReasons {
  SALE
  PURCHASE
  TRANSFER
  ADJUSTMENT
}

enum Role {
  USER
  MANAGER
  OWNER
}

model User {
  id        String   @id @db.Uuid
  name      String   @db.VarChar(64)
  email     String   @unique @db.VarChar(128)
  password  String   @db.VarChar(32)
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map("users")
}

model Product {
  id                    String                @id @db.Uuid
  sku                   String                @unique @db.VarChar(64)
  barcode               String                @unique @db.VarChar(64)
  name                  String                @db.VarChar(64)
  description           String                @db.VarChar(256)
  imageUrl              String                @db.VarChar(512)
  purchasePrice         Decimal               @db.Decimal(12, 2)
  salePrice             Decimal               @db.Decimal(12, 2)
  weight                Decimal               @db.Decimal(8, 3)
  width                 Decimal               @db.Decimal()
  height                Decimal               @db.Decimal()
  depth                 Decimal               @db.Decimal()
  minStock              Int?                  @db.SmallInt
  maxStock              Int?                  @db.SmallInt
  isActive              Boolean               @default(true)
  categoryId            String                @db.Uuid
  category              Category              @relation(fields: [categoryId], references: [id])
  defaultSupplierId     String?               @db.Uuid
  defaultSupplier       Supplier?             @relation(fields: [defaultSupplierId], references: [id])
  locationId            String                @db.Uuid
  location              Location              @relation(fields: [locationId], references: [id])
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @default(now())
  disabledAt            DateTime?             @default(now())
  productStockHistories ProductStockHistory[]

  @@map("products")
}

model Location {
  id                    String                @id @db.Uuid
  zone                  String                @db.VarChar(32)
  aisle                 String                @db.VarChar(64)
  shelf                 String                @db.VarChar(64)
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @default(now())
  products              Product[]
  productStockHistories ProductStockHistory[]

  @@map("locations")
}

model ProductStockHistory {
  id         String          @id @default(uuid()) @db.Uuid
  productId  String          @db.Uuid
  product    Product         @relation(fields: [productId], references: [id])
  stock      Int             @db.Integer
  reason     TransferReasons
  locationId String?         @db.Uuid
  location   Location?       @relation(fields: [locationId], references: [id])
  startDate  DateTime        @default(now())
  endDate    DateTime?

  @@map("product_stock_histories")
}

model Category {
  id        String    @id @db.Uuid
  name      String    @unique @db.VarChar(64)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  products  Product[]

  @@map("categories")
}

model Supplier {
  id        String    @id @db.Uuid
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  products  Product[]

  @@map("suppliers")
}
